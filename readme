Α)  
    Τίτλος μαθήματος:   Ανάπτυξη Λογισμικού για Αλγοριθμικά Προβλήματα
    
    Τίτλος Project:     Μέρος 2ο : Κατακερματισμός και αναζήτηση χρονοσειρών στη C++
                        


    Α μέρος (nearest neighbor)

    Σύντομη περιγραφή:
    - Το main πρόγραμμα search αφού διαβάσει τα arguments καλεί, ανάλογα με τον algorithm και τη method που δόθηκαν, την αντίστοιχη συνάρτηση
    από το search_methods.hpp. Κάθε συνάρτηση διαβάζει τα αρχεία, εισάγει τις καμπύλες στο κατάλληλο hash table και καλώντας τους απαραίτητους
    αλγόριθμους παράγει τα αποτελέσματα στο outputFile.


    Προσθήκες και λεπτομερής περιγραφή:
    - Προστέθηκε extra στη main το optional argument "-nobrute" το οποίο αν δοθεί δεν υπολογίζονται τα true distances για εξοικονόμηση
    χρόνου αν και όπου αυτό χρειαστεί.
    - Προστέθηκε στο point_functions.hpp η δομή "ClassCurve" που αποτελείται από πολλά "ClassPoint" και οι συναρτήσεις "curve_parsing" και 
    "discrete_frechet_distance" που υλοποιούνται στο point_functions.cpp και η πρώτη λειτουργεί για points με 1 διάσταση (value της 
    χρονοσειράς) ή 2 διαστάσεις (value και χρόνος), ενώ η δεύτερη υπολογίζει τη διακριτή frechet απόσταση με την τεχνική του δυναμικού 
    προγραμματισμού.
    - Προστέθηκαν στο algorithms.hpp οι συναρτήσεις "lsh_approximate_NN" και "true_NN" για καμπύλες και χρησιμοποιoύνται είτε για discrete
    είτε για continuous frechet. Επιπλέον στο algorithms.cpp υλοποιείται η "cont_convert_curve" που μετατρέπει τις "ClassCurve" σε
    "Curve" του δοσμένου κώδικα, κατάλληλη δηλαδή κλάση για να υπολογιστεί η continuous frechet distance.
    - Προστέθηκε το αρχείο grid_table.hpp/cpp όπου υλοποιείται η δομή "grid_table", η οποία είναι υπεύθυνη κατά το insert να μετατρέπει τις 
    καμπύλες σε grid-καμπύλες, δουλεύει για 1D ή 2D καμπύλες/grid, ενώ στο τέλος καλεί τις συναρτήσεις lsh της 1ης εργασίας.
    - Προστέθηκαν στο hash_functions οι συναρτήσεις "snapToGrid", "padding", "keyLSHvector", "filtering", "minima_maxima" που χρησιμοποιούνται
    από το εκάστοτε "grid_table" για το σταδιακό hashing της καμπύλης.
    - Στο makefile προστέθηκαν πιθανά arguments για κάθε ερώτημα (uncomment), για γρήγορη εκτέλεση "make run".
    - Τα αρχεία config.hpp/cpp, curve.hpp/cpp, frechet.hpp/cpp, interval.hpp/cpp, point.hpp/cpp, simplification.hpp/cpp, types.hpp έχουν
    παρθεί από το github.com/derohde/Fred.git και χρησιμοποιούνται για τον υπολογισμό της continuous frechet απόστασης.


    Defined παράμετροι:
        Στο grid_table.cpp
        - EPSILON - για το filtering
        Στο hash_functions.cpp
        - M_PAD - για το padding
        * Το w (για το LSH for vectors) μπορεί να αλλαχτεί απ την compute_w
        Στο search_methods.cpp
        - MAX_HAMMING_DIST - max hamming distance για το hypercube


    Aλλαγές:
    - Έγινε μετονομασία της κλάσης Point σε CurvePoint.
    - Τα keys των ClassPoint είναι πλέον τύπου string, αναλόγως και των καμπυλών.


    Παρατηρήσεις επί των αποτελεσμάτων:
    - Στο Aii) τα καλύτερα αποτελέσματα (όσον αφορά το MAF) παίρνουμε με w ~ 600 και δ ~ 1.0 να δίνουν MAF ~ 1-1.2, ενώ με μεγαλύτερο w 
    βελτιώνεται λίγο ο χρόνος αλλά οι χρονοσειρές με μεγάλο true distance από τον ΝΝ τους βγάζουν λίγο χειρότερο approximation factor.
    - Στο Aiii) τα καλύτερα αποτελέσματα παίρνουμε με w ~ 650-700 και δ ~ 1.0 με ανάλογα αποτελέσματα MAF και καλύτερους lsh χρόνους
    από το Aii) εξαιτίας της μείωσης των σημείων στο "filtering"/"minima_maxima".



    B μέρος (clustering)

    Σύντομη περιγραφή:
    - Το main πρόγραμμα cluster αφού διαβάσει τα arguments καλεί την kmeans++ αρχικοποιώντας τα κεντροειδή και ανάλογα με το assignment
    και την update method που δόθηκαν, καλεί τις αντίστοιχες μεθόδους Lloyds / range search (lsh, hypercube και lsh-frechet) πραγματοποιώντας
    το επιθυμητό clustering με update mean vector ή mean frechet.


    Προσθήκες:
    - Προστέθηκαν στο point_functions.hpp η συναρτήσεις "FindOptimalTraversal" και "Mean2Curves" που υλοποιούνται στο point_functions.cpp
    και υπολογίζουν το optimal traversal και τη μέση καμπύλη αντίστοιχα 2 καμπύλων.
    - Προστέθηκαν στο cluster_methods.hpp overloaded συναρτήσεις των υπαρχουσών για καμπύλες και υλοποιήθηκαν στο cluster_methods.cpp.
    - Στην calculate_centroids υπολογίζεται η mean curve από n curves. Χρησιμοποιείται filtering στις mean curves που παράγονται για να μειωθεί
    το τελικό μεέγεθος όσο το δυνατόν ομαλότερα.
    - Στο clustering με lsh frechet γίνεται συνδιασμός από filtering και padding ώστε όλες οι καμπύλες να έχουν το ίδιο μέγεθος για να
    είναι εφικτό το εσωτερικό γινόμενο στο lsh.



    Defined παράμετροι:
        Στο cluster_methods.cpp:
        - MAX_HD - max hamming distance για το hypercube
        - EPSILON - για το filtering των μεγάλων mean curves
        - DELTA - για το grid στο lsh frechet
        - MAX_LSH_PADDING - μέγιστο padding που θα γίνει στις καμπύλες στο clustering lsh frechet
        - MAX_UPDATES - μέγιστος αριθμός updates των centroid
        - MIN_STOP_UPDATE_DISTANCE 15 - η μικρότερη απόσταση μεταξύ παλιών και καινούριων centroids ώστε να σταματήσει το updating.


    Παρατηρήσεις επί των αποτελεσμάτων:
    - Σε δοκιμές στο δοθέν dataset τα αποτελέσματα είναι τα επιθυμητά. Το filtering των mean curves βοηθάει στο να μειωθούν οι μεγάλοι χρόνοι.



    Γ μέρος (Unit Testing)
    


---------------------------------------------------------------------------------------------------------------------------------------------------



Β) 
    Αρχεία κώδικα (δομή):

>include                
        *.hpp


>programs
        >search
                |search.cpp
                |Makefile
        >cluster
                |cluster.cpp
                |Makefile


>src
        *.cpp


|nasd_input.csv
|nasd_query.csv
|readme
|Makefile



---------------------------------------------------------------------------------------------------------------------------------------------------



Γ)
    Οδηγίες μεταγλώττισης:
                        
                -Χρήση <make> στο κοινό Makefile του αρχικού καταλόγου 
                ή ξεχωριστά σε κάθε program:
                    <cd programs/search>
                        <make>
                και
                    <cd programs/cluster>
                        <make>



---------------------------------------------------------------------------------------------------------------------------------------------------



Δ)
    Οδηγίες χρήσης:     
                        
                -Χρήση <make clean> για καθάρισμα των παραγόμενων αρχείων.
                -Χρήση <make run> στον κατάλογο του κάθε program για εκτέλεση με προκαθορισμένα arguments στη main.
                -Χρήση <make valgrind> στον κατάλογο του κάθε program για εκτέλεση με εμφάνιση memory leaks.
    
    *Παραδείγματα ενδεικτικών εκτελέσεων - main arguments βρίσκονται και στο Makefile (σχολιασμένα) του εκάστοτε προγράμματος.



---------------------------------------------------------------------------------------------------------------------------------------------------



E)
    Στοιχεία φοιτητών:      
                    
                    Ηλίας Οικονόμου - 1115201200133
                    Κωνσταντίνος Αντζουλίδης - 1115201500009



---------------------------------------------------------------------------------------------------------------------------------------------------